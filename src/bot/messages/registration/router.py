from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from pydantic import ValidationError
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards import main_keyboard
from bot.messages.registration.enums.answers import RegistrationSectionAnswer
from bot.messages.registration.keyboards import (
    select_gender_keyboard,
    select_preferred_gender_keyboard,
    select_age_group_keyboard,
    select_location_keyboard,
    back_button_keyboard,
)
from bot.messages.registration.schemas import (
    UserAge,
    UserName,
    UserPreferredGender,
    UserGender,
    UserPreferredAgeGroup,
    UserCity, UserRegistrationInfo,
)
from bot.messages.registration.states import RegistrationStates
from bot.messages.registration.utils import complete_user_registration
from bot.users.configs.schemas import UserConfig
from bot.users.geo.utils import reverse_geocode_user_location
from s3 import s3_client

router = Router(name="Registration")


@router.message(RegistrationStates.age)
async def user_age_state_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = UserAge(age=message.text)

        await state.update_data(age=age.age)
        await state.set_state(RegistrationStates.name)
        await message.answer(
            RegistrationSectionAnswer.name, reply_markup=back_button_keyboard()
        )
    except ValidationError:
        await message.answer("–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 28")


@router.message(RegistrationStates.name)
@router.message(RegistrationStates.gender, F.text == "‚Ü©")
async def user_name_state_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏"""
    try:
        name = UserName(name=message.text)

        await state.update_data(name=name.name)
        await state.set_state(RegistrationStates.gender)
        await message.answer(
            RegistrationSectionAnswer.gender, reply_markup=select_gender_keyboard()
        )
    except ValidationError:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è ü§î")


@router.message(RegistrationStates.gender)
@router.message(RegistrationStates.preferred_gender, F.text == "‚Ü©")
async def user_gender_state_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≥–µ–Ω–¥–µ—Ä–∞"""
    try:
        gender = UserGender(input=message.text).convert_input_to_enum()

        await state.update_data(gender=gender)
        await state.set_state(RegistrationStates.preferred_gender)
        await message.answer(
            RegistrationSectionAnswer.preferred_gender, reply_markup=select_preferred_gender_keyboard(),
        )
    except ValidationError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ üòò")


@router.message(RegistrationStates.preferred_gender)
@router.message(RegistrationStates.preferred_age_group, F.text == "‚Ü©")
async def user_preferred_gender_state_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≥–µ–Ω–¥–µ—Ä–∞ –∞–Ω–∫–µ—Ç"""
    try:
        preferred_gender = UserPreferredGender(input=message.text).convert_input_to_enum()

        await state.update_data(preferred_gender=preferred_gender)
        await state.set_state(RegistrationStates.preferred_age_group)
        await message.answer(
            RegistrationSectionAnswer.preferred_age_group, reply_markup=select_age_group_keyboard()
        )
    except ValidationError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ üòò")


@router.message(RegistrationStates.preferred_age_group)
@router.message(RegistrationStates.location, F.text == "‚Ü©")
async def preferred_age_group_state_handler(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π –≥—Ä—É–ø–ø—ã –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –∞–Ω–∫–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
    try:
        preferred_age_group = UserPreferredAgeGroup(input=message.text).convert_input_to_enum()

        await state.update_data(preferred_age_group=preferred_age_group)
        await state.set_state(RegistrationStates.location)
        await message.answer(RegistrationSectionAnswer.location, reply_markup=select_location_keyboard())
    except ValidationError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ üòò")


@router.message(RegistrationStates.location)
@router.message(RegistrationStates.photo, F.text == "‚Ü©")
async def location_state_handler(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        city = UserCity(city=message.text)
        location = message.location

        if location:
            city = await reverse_geocode_user_location(location.latitude, location.longitude)
            location = f"{location.longitude}*{location.latitude}"

        await state.update_data(location=location, city=city.city)
        await state.set_state(RegistrationStates.photo)
        await message.answer(RegistrationSectionAnswer.photo, reply_markup=back_button_keyboard())
    except ValidationError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ üòò")


@router.message(RegistrationStates.photo)
async def photo_state_handler(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –ë–î"""
    if message.content_type == ContentType.PHOTO:
        data = await state.get_data()

        profile_photo_telegram_file_id = message.photo[-1].file_id
        photo_url = s3_client.get_file_url(file_name=profile_photo_telegram_file_id)

        user_registration_info = UserRegistrationInfo(**data, photo_url=photo_url)
        user_config = UserConfig(user_id=message.chat.id, guess_age=True)

        await state.clear()
        await complete_user_registration(
            user_config, profile_photo_telegram_file_id, user_registration_info, session
        )
        await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=main_keyboard())
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç üòò")
