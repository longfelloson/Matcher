import asyncio
from datetime import datetime, timedelta
from typing import Callable, Dict, Optional

from aiogram import BaseMiddleware
from aiogram.fsm.context import FSMContext
from aiogram.types import TelegramObject, Update


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, rate_limit: int):
        super().__init__()
        self.rate_limit = rate_limit
        self.unlock_time = None  # –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

    @staticmethod
    async def get_last_user_action_time(state: FSMContext) -> Optional[datetime]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        data = await state.get_data()
        last_user_action_time_str = data.get("last_user_action_time")
        if last_user_action_time_str:
            return datetime.fromisoformat(last_user_action_time_str)
        return None

    @staticmethod
    async def update_last_user_action_datetime(state: FSMContext) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        data = await state.get_data()
        data["last_user_action_time"] = datetime.now().isoformat()
        await state.set_data(data)

    async def is_allowed_to_make_request(self, last_user_action_time: Optional[datetime]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if not last_user_action_time:
            return True

        time_difference = datetime.now() - last_user_action_time
        return time_difference.total_seconds() >= self.rate_limit

    @staticmethod
    async def send_warning(event: Update, text: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if event.message:
            await event.message.reply(text)

        if event.callback_query:
            await event.callback_query.answer(text)

    async def unblock_access_to_chat(self, event: Update, state: FSMContext) -> None:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"""
        while True:
            data = await state.get_data()
            unblock_datetime = datetime.fromisoformat(data.get("unblock_time"))
            if datetime.now() >= unblock_datetime:
                data["is_user_blocked"] = False
                data["unblock_time"] = None

                await state.set_data(data)
                await self.send_warning(event, text="–¢—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—à—å —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üòä")
                break
            else:
                time_difference: timedelta = unblock_datetime - datetime.now()
                await asyncio.sleep(time_difference.total_seconds())

    async def block_access_to_chat(self, state: FSMContext) -> None:
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"""
        data = {
            "is_user_blocked": True,
            "unblock_time": (datetime.now() + timedelta(seconds=self.rate_limit)).isoformat()
        }
        await state.update_data(data)

    async def __call__(
        self,
        handler: Callable,
        event: TelegramObject,
        data: Dict,
    ):
        """–ü—Ä–æ—Å–ª–æ–π–∫–∞-–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        state: FSMContext = data.get("state")
        state_data = await state.get_data()
        blocked = state_data.get("is_user_blocked")

        last_action_time = await self.get_last_user_action_time(state)

        await self.update_last_user_action_datetime(state)

        if blocked:
            state_data["unblock_time"] = (datetime.now() + timedelta(seconds=self.rate_limit)).isoformat()
            await state.set_data(state_data)
            return

        if await self.is_allowed_to_make_request(last_action_time):
            return await handler(event, data)

        await self.block_access_to_chat(state)
        await self.send_warning(event, text=f"–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É ‚è≥")

        await self.unblock_access_to_chat(event, state)
